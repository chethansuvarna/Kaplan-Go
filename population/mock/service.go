// Code generated by MockGen. DO NOT EDIT.
// Source: Kaplan-Go/population (interfaces: Service)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "Kaplan-Go/models"
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetCountries mocks base method
func (m *MockService) GetCountries(arg0 *gin.Context) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountries", arg0)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountries indicates an expected call of GetCountries
func (mr *MockServiceMockRecorder) GetCountries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountries", reflect.TypeOf((*MockService)(nil).GetCountries), arg0)
}

// GetPopulationForCountry mocks base method
func (m *MockService) GetPopulationForCountry(arg0 *gin.Context, arg1 models.PopulationRequest) (models.PopulationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPopulationForCountry", arg0, arg1)
	ret0, _ := ret[0].(models.PopulationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPopulationForCountry indicates an expected call of GetCountriesGO
func (mr *MockServiceMockRecorder) GetPopulationForCountry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPopulationForCountry", reflect.TypeOf((*MockService)(nil).GetPopulationForCountry), arg0, arg1)
}

// HelloWorld mocks base method
func (m *MockService) HelloWorld(arg0 *gin.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HelloWorld", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// HelloWorld indicates an expected call of HelloWorld
func (mr *MockServiceMockRecorder) HelloWorld(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HelloWorld", reflect.TypeOf((*MockService)(nil).HelloWorld), arg0)
}

// MakeRequest mocks base method
func (m *MockService) MakeRequest(arg0, arg1 string, arg2 chan<- interface{}, arg3 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MakeRequest", arg0, arg1, arg2, arg3)
}

// MakeRequest indicates an expected call of MakeRequest
func (mr *MockServiceMockRecorder) MakeRequest(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRequest", reflect.TypeOf((*MockService)(nil).MakeRequest), arg0, arg1, arg2, arg3)
}
